/*
 * DownloadJobOverviewFrame.java
 *
 * Created on __DATE__, __TIME__
 */

package de.phleisch.app.itsucks.gui2;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import de.phleisch.app.itsucks.ApplicationConstants;
import de.phleisch.app.itsucks.DispatcherThread;
import de.phleisch.app.itsucks.SpringContextSingelton;
import de.phleisch.app.itsucks.event.CoreEvents;
import de.phleisch.app.itsucks.event.Event;
import de.phleisch.app.itsucks.event.EventObserver;
import de.phleisch.app.itsucks.filter.JobFilter;
import de.phleisch.app.itsucks.gui.AddDownloadJobDialog;
import de.phleisch.app.itsucks.gui.AddDownloadJobInterface;
import de.phleisch.app.itsucks.gui.panel.DownloadStatusPanel;
import de.phleisch.app.itsucks.gui2.ifc.AddDownloadJobCapable;
import de.phleisch.app.itsucks.io.DownloadJob;

/**
 * 
 * @author __USER__
 */
public class DownloadJobOverviewFrame extends javax.swing.JFrame implements
		AddDownloadJobCapable, AddDownloadJobInterface {

	private static final long serialVersionUID = 6628042574113496207L;
	private static Log mLog = LogFactory.getLog(DownloadJobOverviewFrame.class);

	/** Creates new form DownloadJobOverviewFrame */
	public DownloadJobOverviewFrame() {
		initComponents();
	}

	public void addDownload(DownloadJob pDownload, List<JobFilter> pFilterList) {

		DownloadStatusPanel pane = new DownloadStatusPanel();

		DispatcherThread dispatcher = (DispatcherThread) SpringContextSingelton
				.getApplicationContext().getBean("DispatcherThread");

		if (dispatcher == null) {
			throw new RuntimeException("Can't instatiate dispatcher!");
		}
		pane.setDispatcher(dispatcher);
		pane.setName(pDownload.getName());

		dispatcher.addJobFilter(pFilterList);
		dispatcher.addJob(pDownload);

		dispatcher.getEventManager().registerObserver(new EventObserver() {

			public void processEvent(Event pEvent) {
				if (pEvent.getCategory() == CoreEvents.EVENT_CATEGORY_CORE) {
					updateButtonState();
					updateTabTitles();
				}
			}

		});

		// start dispatcher thread
		try {
			dispatcher.processJobs();

		} catch (Exception e) {
			mLog.error("Error starting dispatcher thread", e);
		}

		// wait till dispatcher is starting
		for (int i = 0; i < 10 && !dispatcher.isRunning(); i++) {
			try {
				Thread.sleep(100);
			} catch (InterruptedException e) {
			}
		}

		// jTabbedPane.add(pane.getName(), pane);
		downloadsTabbedPane.add(pane.getName(), pane);

	}

	private void updateButtonState() {

		Component selectedComponent = downloadsTabbedPane
				.getSelectedComponent();
		if (selectedComponent == null) {
			pauseDownloadButton.setEnabled(false);
			pauseDownloadButton.setText("Pause download");
			stopDownloadButton.setEnabled(false);
		} else {
			DownloadStatusPanel pane = (DownloadStatusPanel) selectedComponent;
			DispatcherThread dispatcher = pane.getDispatcher();

			if (dispatcher.isPaused()) {
				pauseDownloadButton.setText("Unpause download");
			} else {
				pauseDownloadButton.setText("Pause download");
			}

			if (dispatcher.isRunning()) {
				pauseDownloadButton.setEnabled(true);
			} else {
				pauseDownloadButton.setEnabled(false);
			}

			stopDownloadButton.setEnabled(true);
		}
	}

	private void updateTabTitles() {

		Component[] components = downloadsTabbedPane.getComponents();
		for (int i = 0; i < components.length; i++) {

			DownloadStatusPanel pane = (DownloadStatusPanel) components[i];

			DispatcherThread dispatcher = pane.getDispatcher();

			if (dispatcher.isPaused()) {
				downloadsTabbedPane.setTitleAt(downloadsTabbedPane
						.indexOfComponent(pane), pane.getName() + " (paused)");
			} else if (dispatcher.isRunning()) {
				downloadsTabbedPane.setTitleAt(downloadsTabbedPane
						.indexOfComponent(pane), pane.getName());
			} else {
				downloadsTabbedPane
						.setTitleAt(downloadsTabbedPane.indexOfComponent(pane),
								pane.getName() + " (finished)");
			}

		}

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">
	private void initComponents() {
		downloadsTabbedPane = new javax.swing.JTabbedPane();
		toolBar = new javax.swing.JToolBar();
		newDownloadButton = new javax.swing.JButton();
		pauseDownloadButton = new javax.swing.JButton();
		stopDownloadButton = new javax.swing.JButton();
		menuBar = new javax.swing.JMenuBar();
		fileMenu = new javax.swing.JMenu();
		createNewJobMenuItem = new javax.swing.JMenuItem();
		openDownloadTemplateMenuItem = new javax.swing.JMenuItem();
		exitMenuItem = new javax.swing.JMenuItem();
		toolsMenu = new javax.swing.JMenu();
		regExpTesterMenuItem = new javax.swing.JMenuItem();
		helpMenu = new javax.swing.JMenu();
		contentsMenuItem = new javax.swing.JMenuItem();
		aboutMenuItem = new javax.swing.JMenuItem();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle(ApplicationConstants.APPLICATION_TITLE);
		downloadsTabbedPane.getAccessibleContext().setAccessibleName(
				"Download 1");

		toolBar.setFloatable(false);
		newDownloadButton.setFont(new java.awt.Font("Dialog", 0, 12));
		newDownloadButton.setIcon(new javax.swing.ImageIcon(getClass()
				.getResource("/document-new.png")));
		newDownloadButton.setText("New download");
		newDownloadButton.setBorderPainted(false);
		newDownloadButton.setOpaque(false);
		newDownloadButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						newDownloadButtonActionPerformed(evt);
					}
				});

		toolBar.add(newDownloadButton);

		pauseDownloadButton.setFont(new java.awt.Font("Dialog", 0, 12));
		pauseDownloadButton.setIcon(new javax.swing.ImageIcon(getClass()
				.getResource("/pause.png")));
		pauseDownloadButton.setText("Pause download");
		pauseDownloadButton.setBorderPainted(false);
		pauseDownloadButton.setEnabled(false);
		pauseDownloadButton.setOpaque(false);
		toolBar.add(pauseDownloadButton);

		stopDownloadButton.setFont(new java.awt.Font("Dialog", 0, 12));
		stopDownloadButton.setIcon(new javax.swing.ImageIcon(getClass()
				.getResource("/edit-delete.png")));
		stopDownloadButton.setText("Stop download");
		stopDownloadButton.setBorderPainted(false);
		stopDownloadButton.setEnabled(false);
		stopDownloadButton.setOpaque(false);
		toolBar.add(stopDownloadButton);

		fileMenu.setText("File");
		createNewJobMenuItem.setText("Create new download");
		createNewJobMenuItem
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						createNewJobMenuItemActionPerformed(evt);
					}
				});

		fileMenu.add(createNewJobMenuItem);

		openDownloadTemplateMenuItem.setText("Open download template");
		openDownloadTemplateMenuItem.setEnabled(false);
		openDownloadTemplateMenuItem
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						openDownloadTemplateMenuItemActionPerformed(evt);
					}
				});

		fileMenu.add(openDownloadTemplateMenuItem);

		exitMenuItem.setText("Exit");
		exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				exitMenuItemActionPerformed(evt);
			}
		});

		fileMenu.add(exitMenuItem);

		menuBar.add(fileMenu);

		toolsMenu.setText("Tools");
		toolsMenu.setEnabled(false);
		regExpTesterMenuItem.setText("Regular Expression Tester");
		toolsMenu.add(regExpTesterMenuItem);

		menuBar.add(toolsMenu);

		helpMenu.setText("Help");
		helpMenu.setEnabled(false);
		contentsMenuItem.setText("Contents");
		helpMenu.add(contentsMenuItem);

		aboutMenuItem.setText("About");
		helpMenu.add(aboutMenuItem);

		menuBar.add(helpMenu);

		setJMenuBar(menuBar);

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(toolBar,
				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 673,
				Short.MAX_VALUE).add(downloadsTabbedPane,
				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 673,
				Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(
				layout.createSequentialGroup().add(toolBar,
						org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
						org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
						org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED).add(
								downloadsTabbedPane,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								440, Short.MAX_VALUE)));
		pack();
	}// </editor-fold>//GEN-END:initComponents

	// GEN-FIRST:event_newDownloadButtonActionPerformed
	private void newDownloadButtonActionPerformed(java.awt.event.ActionEvent evt) {
		createNewJobMenuItemActionPerformed(evt);
	}// GEN-LAST:event_newDownloadButtonActionPerformed

	// GEN-FIRST:event_openDownloadTemplateMenuItemActionPerformed
	private void openDownloadTemplateMenuItemActionPerformed(
			java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}// GEN-LAST:event_openDownloadTemplateMenuItemActionPerformed

	// GEN-FIRST:event_createNewJobMenuItemActionPerformed
	private void createNewJobMenuItemActionPerformed(ActionEvent evt) {
		// EditDownloadJobFrame frame = new EditDownloadJobFrame();
		// frame.setVisible(true);

		AddDownloadJobDialog dialog = new AddDownloadJobDialog(this, this);
		dialog.setVisible(true);

	}// GEN-LAST:event_createNewJobMenuItemActionPerformed

	private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_exitMenuItemActionPerformed
		System.exit(0);
	}// GEN-LAST:event_exitMenuItemActionPerformed

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new DownloadJobOverviewFrame().setVisible(true);
			}
		});
	}

	// // TabbedPaneUI
	// public class MyTabbedPaneUI extends
	// javax.swing.plaf.basic.BasicTabbedPaneUI {
	// protected Insets getContentBorderInsets(int tabPlacement) {
	// return new Insets(0, 0, 0, 0);
	// }
	//
	// protected void paintContentBorder(Graphics g, int tabPlacement,
	// int selectedIndex) {
	// }
	// }
	//
	// public MyTabbedPaneUI getMyTabbedPaneUI() {
	// return new MyTabbedPaneUI();
	// }

	// GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JMenuItem aboutMenuItem;
	private javax.swing.JMenuItem contentsMenuItem;
	private javax.swing.JMenuItem createNewJobMenuItem;
	private javax.swing.JTabbedPane downloadsTabbedPane;
	private javax.swing.JMenuItem exitMenuItem;
	private javax.swing.JMenu fileMenu;
	private javax.swing.JMenu helpMenu;
	private javax.swing.JMenuBar menuBar;
	private javax.swing.JButton newDownloadButton;
	private javax.swing.JMenuItem openDownloadTemplateMenuItem;
	private javax.swing.JButton pauseDownloadButton;
	private javax.swing.JMenuItem regExpTesterMenuItem;
	private javax.swing.JButton stopDownloadButton;
	private javax.swing.JToolBar toolBar;
	private javax.swing.JMenu toolsMenu;
	// End of variables declaration//GEN-END:variables

}